import glob, os, shutil
import subprocess

folder = 'PATH/TO/FOLDER/WITH/PDBQTS'
i = 0

j = 0
#The first for loop creates a directory based on the ligand ID number from the PDBQT file. For example, 435.pdbqt would creat directory 435.
for file_path in glob.glob(os.path.join(folder, '*.*')):
    new_dir = file_path.rsplit('.', 1)[0]
    os.mkdir(os.path.join(folder, new_dir))
    shutil.move(file_path, os.path.join(new_dir, os.path.basename(file_path)))
    i = i + 1
    print "Created directory number: ", i #This only returns how many times a directory was created. Useful to know for following docking experiments and analysis to set ranges appropriately.
#This step moves only the just created directories to wherever dockingfiles is located.    
for subdir, dirs, files in os.walk(folder):
    movedir = ('mv /PATH/TO/YOUR/pdbqts/* /PATH/TO/YOUR/dockingfiles')
    subprocess.call(movedir, shell=True)
    print 'Moved directories'
print 'All done' 

z = 0
#This step now moves all of your ligand PDBQTs to the directory corresponding to its ligand ID number. For example, 678.pdbqt will be moved to directory 678
#Set j to the highest value for the ligand ID number.
for j in range (91655175):
    if os.path.exists('/PATH/TO/YOUR/dockingfiles/%d/%d.pdbqt' % (j, j)):
        z = z + 1
        print 'The directory %d does exist' % j
        os.rename('/PATH/YOUR/YOUR/dockingfiles/%d' % j, '/PATH/TO/YOUR/dockingfiles/Z_%d' % z)
        print 'New directory name is Z_%d' % z
        os.chdir('/PATH/TO/YOUR/dockingfiles/Z_%d' % z)
        #Next step makes a symbolic link with your original ligand PDBQT ID number and links it as ligand.pdbqt
        #***It is important to link your ligand PDBQT at this time as it may become more difficult to link at a later time***
        os.symlink('/PATH/TO/YOUR/dockingfiles/Z_%d/%d.pdbqt' % (z ,j), '/PATH/TO/YOUR/dockingfiles/Z_%d/ligand.pdbqt' % z)
        os.chdir('../')
    else:
        print 'Directory does not exist', j
        continue
print 'Done creating ligand links'

k = 0
l = 0
#The following step creates relative links for the receptor.pdbqt files in the Z_ directory
#We have placed our receptor pdbqt files in the directory for-docking
#k is set to the number of unique receptor conformations being used for docking
for k in range(10):
    if os.path.exists('/PATH/TO/YOUR/for-docking/yourReceptorBasename%d.pdbqt' % k):
        print 'k:', k
        #l is set to the number of ligands/number of directories just created to store ligands and files for docking experiments.
        for l in range(30450):
            if os.path.exists('/PATH/TO/YOUR/dockingfiles/Z_%d' % l):
                print 'l:', l
                os.chdir('/PATH/TO/YOUR/dockingfiles/Z_%d' % l)
                #links your receptor conformation as 'yourReceptorBasename%d.pdbqt'
                os.symlink('PATH/TO/YOUR/for-docking/yourReceptorBasename%d.pdbqt' % k, 'newReceptorBasename%d.pdbqt' % k)
                os.chdir('ADJUST/PATH/TO/MAKE/FIRST/CONDITION/TRUE') #Changing into and out of the directories can be eliminated if the exact path of the file is known.
            else:
                print 'Does not exist, l:', l
                continue
    else:
        print 'Does not exist, k:', k
        continue
print 'Done linking yourReceptorBasename pdbqts' 

m = 0
n = 0
#The following step creates relative links to the GPF files used as input GPF file for later use in AutoGrid.
#Since the desired region fluctuated, grid boxes were generated by visual inspection using AutoDockTools to generate the 
#GPF files being linked.
#set m to number of unique receptor conformations being investigate for docking.
for m in range(10):
    if os.path.exists('/PATH/TO/YOUR/for-docking/yourBasename%d.gpf' % m):
        print 'm:', m
        #set n to number of ligands/directories created earlier for later docking experiments.
        for n in range(30450):
            if os.path.exists('/PATH/TO/YOUR/dockingfiles/Z_%d' % n):
                print 'n:', n
                os.chdir('/PATH/TO/YOUR/dockingfiles/Z_%d' % n)
                os.symlink('PATH/TO/for-docking/yourGPFBasename%d.gpf' % m, 'yourGPFBasename%d.gpf' % m)
                os.chdir('PATH/TO/MAKE/FIRST/CONDITION/TRUE') #changing into and out of the directories can be eliminated if the exact path of the file is known.
            else:
                print 'Does not exist, n:', n
                continue
    else:
        print 'Does not exist, m:', m
        continue
print 'Done linking yourReceptorBasename gpfs'
print 'All done :)'